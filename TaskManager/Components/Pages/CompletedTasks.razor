@page "/CompletedTasks"
@using TaskManager.Services
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime


<h3>CompletedTasks</h3>

@if (completedTasks.Any())
{
    <table class="table table-success">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Description</th>
                <th>Priority</th>
                <th>DueDate</th>
                <th>Type</th>
                <th>
                    <button class="btn btn-sm btn-danger" @onclick="ConfirmDeleteAll">Delete All</button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var taskObject in completedTasks)
            {
                <tr>
                    <td>@taskObject.Id</td>
                    <td>@taskObject.Title</td>
                    <td>@taskObject.Description</td>
                    <td>@taskObject.Priority</td>
                    <td>@taskObject.DueDate?.ToString("MM-dd-yyyy")</td>
                    <td>@taskObject.Type</td>
                    <td><button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(taskObject)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>

    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="margin-top: -100px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this task?: <strong>@selectedTask?.Title</strong>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteTask">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteAllModal" tabindex="-1" aria-labelledby="deleteAllModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="margin-top: -100px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteAllModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete all completed tasks?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteAllTasks">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code 
{
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<TaskObject> tasks = new();
    private List<TaskObject> completedTasks = new();
    private TaskObject? selectedTask = new();

    [Inject] private TaskStateService TaskStateService { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!TaskStateService.Tasks.Any() && !TaskStateService.CompletedTasks.Any())
        {
            var allTasks = await Http.GetFromJsonAsync<List<TaskObject>>("api/task");
            tasks = allTasks.Where(t => !t.IsCompleted).ToList();
            completedTasks = allTasks.Where(t => t.IsCompleted).ToList();
        }
    }

    private void ConfirmDelete(TaskObject task)
    {
        selectedTask = task;
        JSRuntime.InvokeVoidAsync("bootstrapModal.show", "#deleteModal");
    }

    private async Task DeleteTask()
    {
        if (selectedTask != null)
        {
            var response = await Http.DeleteAsync($"api/task/{selectedTask.Id}");
            if (response.IsSuccessStatusCode)
            {
                completedTasks.Remove(selectedTask);
                selectedTask = null;
                StateHasChanged();
            }

            JSRuntime.InvokeVoidAsync("bootstrapModal.hide", "#deleteModal");
        }
    }


    private void ConfirmDeleteAll()
    {
        JSRuntime.InvokeVoidAsync("bootstrapModal.show", "#deleteAllModal");
    }

    private async Task DeleteAllTasks()
    {
        if (completedTasks.Any())
        {
            foreach (var task in completedTasks.ToList())
            {
                var response = await Http.DeleteAsync($"api/task/{task.Id}");
                if (response.IsSuccessStatusCode)
                {
                    completedTasks.Remove(task);
                    StateHasChanged();
                }

                JSRuntime.InvokeVoidAsync("bootstrapModal.hide", "#deleteAllModal");
            }
        }
    }
}
