@page "/"
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<h3>To-Do List</h3>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Description</th>
                <th>Priority</th>
                <th>DueDate</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var taskObject in tasks)
            {
                <tr>
                    <td>@taskObject.Id</td>
                    <td>@taskObject.Title</td>
                    <td>@taskObject.Description</td>
                    <td>@taskObject.Priority</td>
                    <td>@taskObject.DueDate.ToString("MM-dd-yyyy")</td>
                    <td>@taskObject.Type</td>
                    <td>
                        <button class="btn btn-sm btn-success" @onclick="() => MarkComplete(taskObject.Id)">Mark Complete</button>
                        <button class="btn btn-sm btn-secondary">Edit Task Details</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(taskObject)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    

    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this task?: <strong>@selectedTask?.Title</strong>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick= "DeleteTask">Delete</button>
                </div>
            </div>
        </div>
    </div>

}


@code
{
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private bool isLoading = false;
    private List<TaskObject> tasks = new();
    private List<TaskObject> completedTasks = new();
    private TaskObject? selectedTask;

    protected override async Task OnInitializedAsync()
    {
        tasks = await Http.GetFromJsonAsync<List<TaskObject>>("api/task");
    }

    [Inject] private TaskStateService TaskStateService { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!TaskStateService.Tasks.Any() && !TaskStateService.CompletedTasks.Any())
        {
            var allTasks = await Http.GetFromJsonAsync<List<TaskObject>>("api/task");
            tasks = allTasks.Where(t => !t.IsCompleted).ToList();
            completedTasks = allTasks.Where(t => t.IsCompleted).ToList();
        }
    }

    private async Task MarkComplete(int id)
    {

        var task = tasks.FirstOrDefault(t => t.Id == id);
        if (task != null)
        {
            task.IsCompleted = true;
            await Http.PutAsJsonAsync($"api/task/{id}", task);

            tasks.Remove(task);
            completedTasks.Add(task);
            StateHasChanged();
        }
    }

    private void ConfirmDelete(TaskObject task)
    {
        selectedTask = task;
        JSRuntime.InvokeVoidAsync("bootstrapModal.show", "#deleteModal");
    }

    private async Task DeleteTask()
    {
        if (selectedTask != null)
        {
            var response = await Http.DeleteAsync($"api/task/{selectedTask.Id}");
            if (response.IsSuccessStatusCode)
            {
                tasks.Remove(selectedTask);
                selectedTask = null;
                StateHasChanged();
            }

            JSRuntime.InvokeVoidAsync("bootstrapModal.hide", "#deleteModal");
        }
    }
}


