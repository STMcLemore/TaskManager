@page "/"
@using System.Net.Http.Json
@using TaskManager.Services
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<h2>Active Tasks</h2>


@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h5><u> One Offs</u></h5>
    <MudPaper >
            <table class="table" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Priority</th>
                            <th>DueDate</th>
                            <th>Type</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                @foreach (var taskObject in tasks.Where(t => t.Type == TaskType.Once))
                        {
                            <tr>
                                <td>@taskObject.Id</td>
                                <td>@taskObject.Title</td>
                                <td>@taskObject.Description</td>
                                <td>@taskObject.Priority</td>
                                <td>@taskObject.DueDate?.ToString("MM-dd-yyyy")</td>
                                <td>@taskObject.Type</td>
                                <td>
                                    <button class="btn btn-sm btn-success" @onclick="() => ConfirmCompletion(taskObject)">Mark Complete</button>
                                    <button class="btn btn-sm btn-secondary" @onclick="() => EditTask(taskObject)">Edit Task</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(taskObject)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
            </table>
    </MudPaper>

    <br/>

    <h5><u> Daily</u></h5>
    <MudPaper>
        <table class="table" style="width: 100%;">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Priority</th>
                    <th>DueDate</th>
                    <th>Type</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var taskObject in tasks.Where(t => t.Type == TaskType.Daily))
                {
                    <tr>
                        <td>@taskObject.Id</td>
                        <td>@taskObject.Title</td>
                        <td>@taskObject.Description</td>
                        <td>@taskObject.Priority</td>
                        <td>@taskObject.DueDate?.ToString("MM-dd-yyyy")</td>
                        <td>@taskObject.Type</td>
                        <td>
                            <button class="btn btn-sm btn-success" @onclick="() => ConfirmCompletion(taskObject)">Mark Complete</button>
                            <button class="btn btn-sm btn-secondary" @onclick="() => EditTask(taskObject)">Edit Task</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(taskObject)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </MudPaper>

    <br />

    <h5><u> Weekly</u></h5>
    <MudPaper>
        <table class="table" style="width: 100%;">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Priority</th>
                    <th>DueDate</th>
                    <th>Type</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var taskObject in tasks.Where(t => t.Type == TaskType.Weekly))
                {
                    <tr>
                        <td>@taskObject.Id</td>
                        <td>@taskObject.Title</td>
                        <td>@taskObject.Description</td>
                        <td>@taskObject.Priority</td>
                        <td>@taskObject.DueDate?.ToString("MM-dd-yyyy")</td>
                        <td>@taskObject.Type</td>
                        <td>
                            <button class="btn btn-sm btn-success" @onclick="() => ConfirmCompletion(taskObject)">Mark Complete</button>
                            <button class="btn btn-sm btn-secondary" @onclick="() => EditTask(taskObject)">Edit Task</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(taskObject)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </MudPaper>

    <br />

    <h5><u> Monthly</u></h5>
    <MudPaper>
        <table class="table" style="width: 100%;">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Priority</th>
                    <th>DueDate</th>
                    <th>Type</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var taskObject in tasks.Where(t => t.Type == TaskType.Monthly))
                {
                    <tr>
                        <td>@taskObject.Id</td>
                        <td>@taskObject.Title</td>
                        <td>@taskObject.Description</td>
                        <td>@taskObject.Priority</td>
                        <td>@taskObject.DueDate?.ToString("MM-dd-yyyy")</td>
                        <td>@taskObject.Type</td>
                        <td>
                            <button class="btn btn-sm btn-success" @onclick="() => ConfirmCompletion(taskObject)">Mark Complete</button>
                            <button class="btn btn-sm btn-secondary" @onclick="() => EditTask(taskObject)">Edit Task</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(taskObject)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </MudPaper>




    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="margin-top: -100px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this task?: <strong>@selectedTask?.Title</strong>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick= "DeleteTask">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="completeModal" tabindex="-1" aria-labelledby="completeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="margin-top: -100px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="completeModalLabel">Confirm Completion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Mark task as completed?: <strong>@selectedTask?.Title</strong>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="() => MarkComplete(selectedTaskId)">Mark Complete</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="margin-top: -50px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Task Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Title</label>
                        <input type="text" id="taskTitle" class="form-control" @bind-value="editingTask.Title" />
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Description</label>
                        <input TextArea   id="taskDescription" class="form-control" @bind-value="editingTask.Description"/>
                    </div>
                    <div class="mb-3">
                        <label for="taskPriority" class="form-label">Priority</label>
                        <select id="taskPriority" class="form-select" @bind="editingTask.Priority">
                            <option value="@TaskPriority.Low">Low</option>
                            <option value="@TaskPriority.Medium">Medium</option>
                            <option value="@TaskPriority.High">High</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="taskDueDate" class="form-label">Due Date</label>
                        <input type="date" id="TaskDueDate" class="form-control" @bind-value="editingTask.DueDate" />
                    </div>
                    <div class="mb-3">
                        <label for="taskType" class="form-label">Type</label>
                        <select id="taskType" class="form-select" @bind="editingTask.Type">
                            <option value="@TaskType.Once">Once</option>
                            <option value="@TaskType.Daily">Daily</option>
                            <option value="@TaskType.Weekly">Weekly</option>
                            <option value="@TaskType.Monthly">Monthly</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTaskChanges">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
}


@code
{
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private bool isLoading = false;
    private List<TaskObject> tasks = new();
    private List<TaskObject> completedTasks = new();
    private TaskObject? selectedTask = new();
    private int selectedTaskId;
    private TaskObject editingTask = new(); // Temporary model for use in the EditTask modal to ensure no changes are shown until saved
    private MudTable<TaskObject> _table;
    private bool _selectionChangeable = true;


    protected override async Task OnInitializedAsync()
    {
        tasks = await Http.GetFromJsonAsync<List<TaskObject>>("api/task");
    }

    [Inject]
    private TaskStateService TaskStateService { get; set; }


    protected override async Task OnParametersSetAsync()

    {
        if (!TaskStateService.Tasks.Any() && !TaskStateService.CompletedTasks.Any())
        {
            var allTasks = await Http.GetFromJsonAsync<List<TaskObject>>("api/task");
            tasks = allTasks.Where(t => !t.IsCompleted).ToList();
            completedTasks = allTasks.Where(t => t.IsCompleted).ToList();
        }
    }


    private async Task MarkComplete(int id)
    {

        var task = tasks.FirstOrDefault(t => t.Id == id);
        if (task != null)
        {
            task.IsCompleted = true;
            await Http.PutAsJsonAsync($"api/task/{id}", task);

            selectedTask.IsCompleted = true;
            tasks.Remove(task);
            completedTasks.Add(task);
            StateHasChanged();

            if (task.Type != TaskType.Once)
            {
                // Run the rescheduling asynchronously (fire-and-forget).
                _ = RescheduleRecurringTask(task);
            }
        }

        await JSRuntime.InvokeVoidAsync("bootstrapModal.hide", "#completeModal");

    }

    private async Task RescheduleRecurringTask(TaskObject task) //schedule completed tasks to be readded to active tasks if recurring
    {
        TimeSpan delay = task.Type switch
        {
            TaskType.Daily => TimeSpan.FromDays(1),
            TaskType.Weekly => TimeSpan.FromDays(7),
            TaskType.Monthly => TimeSpan.FromDays(30),
            _ => TimeSpan.Zero
        };

        await Task.Delay(delay);

        task.DueDate = DateTime.Today;

        task.IsCompleted = false;

        var updateResponse = await Http.PutAsJsonAsync($"api/task/{task.Id}", task);
        if (updateResponse.IsSuccessStatusCode)
        {
            completedTasks.Remove(task);
            tasks.Add(task);

            StateHasChanged();
        }
    }


    private void ConfirmCompletion(TaskObject task)
    {
        selectedTaskId = task.Id;
        selectedTask = task;
        JSRuntime.InvokeVoidAsync("bootstrapModal.show", "#completeModal");
    }


    private void ConfirmDelete(TaskObject task)
    {
        selectedTask = task;
        JSRuntime.InvokeVoidAsync("bootstrapModal.show", "#deleteModal");
    }


    private void EditTask(TaskObject task)
    {
        selectedTask = task;

        editingTask = new TaskObject //Deep clone the task into editingTask
        {
                Id = task.Id,
                Title = task.Title,
                Description = task.Description,
                Priority = task.Priority,
                DueDate = task.DueDate,
                Type = task.Type
        };


        JSRuntime.InvokeVoidAsync("bootstrapModal.show", "#editModal");
    }


    private async Task SaveTaskChanges()
    {
        if (selectedTask != null)
        {
            var response = await Http.PutAsJsonAsync($"api/task/{selectedTask.Id}", editingTask);

            if (response.IsSuccessStatusCode)
            {
                selectedTask.Title = editingTask.Title;
                selectedTask.Description = editingTask.Description;
                selectedTask.Priority = editingTask.Priority;
                selectedTask.DueDate = editingTask.DueDate;
                selectedTask.Type = editingTask.Type;
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("bootstrapModal.hide", "#editModal");
            }
        }
    }


    private async Task DeleteTask()
    {
        if (selectedTask != null)
        {
            var response = await Http.DeleteAsync($"api/task/{selectedTask.Id}");
            if (response.IsSuccessStatusCode)
            {
                tasks.Remove(selectedTask);
                selectedTask = null;
                StateHasChanged();
            }

            await JSRuntime.InvokeVoidAsync("bootstrapModal.hide", "#deleteModal");
        }
    }
}


