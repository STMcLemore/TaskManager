@page "/addtask"
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor.Utilities
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@using FluentValidation



<h2>Add New Task</h2>

<MudPaper Width="100%" Class="d-flex justify-center align-center p-5">
    <MudGrid Justify="Justify.Center" AlignItems="Center">
        <div class="row">
            <div class="Col-md-4">
                <EditForm Model="@taskObject" OnValidSubmit="HandleValidSubmit" FormName="NewTask1" Enhance="true" method="post">
                    <DataAnnotationsValidator />

                    <div class="Col-md-4">
                        <label for="title" class="form-label">Title: </label>
                        <InputText id="title" class="form-control col-sm-8" @bind-Value="@taskObject.Title" placeholder="Enter Title" Style="width: 600px;"></InputText>
                        <ValidationMessage For="() => taskObject.Title" />
                    </div>  

                    <br/>

                    <div class="Col-md-4">
                        <label for="description" class="form-label">Description: </label>
                        <InputText id="title" class="form-control col-sm-8" @bind-Value="@taskObject.Description" placeholder="Enter Description"></InputText>
                        <ValidationMessage For="() => taskObject.Description" />
                    </div>

                    <br />

                    <div class="Col-md-4">
                        <label for="priority" class="form-label">Priority: </label>
                        <InputSelect id="priority" class="form-control col-sm-8" @bind-Value="@taskObject.Priority" placeholder="Enter Priority">
                            <option value="@TaskPriority.Low">Low</option>
                            <option value="@TaskPriority.Medium">Medium</option>
                            <option value="@TaskPriority.High">High</option>
                        </InputSelect>
                    </div>

                    <br />

                    <div class="Col-md-4">
                        <label for="dueDate" class="form-label">Due Date: </label>
                        <InputDate id="DueDate" class="form-control col-sm-8" @bind-Value="@taskObject.DueDate" />
                    </div> 


                    <br />

                    <div class="Col-md-4">
                        <label for="type" class="form-label">Task Type: </label>
                        <InputSelect id="type" class="form-control col-sm-8" @bind-Value="@taskObject.Type">
                            <option value="@TaskType.Once">Once</option>
                            <option value="@TaskType.Daily">Daily</option>
                            <option value="@TaskType.Weekly">Weekly</option>
                            <option value="@TaskType.Monthly">Monthly</option>
                        </InputSelect>
                        <ValidationMessage For="() => taskObject.Type" />
                    </div>

                    <br />

                    <button type="submit" class="btn btn-primary">Add Task</button>
                </EditForm>
            </div>
        </div>
    </MudGrid>
</MudPaper>

@if (isSuccess)
{
    <div class="alert alert-success mt-3">Task added successfully!</div>
}
@if (isError)
{
    <div class="alert alert-danger mt-3">An error occurred while adding the task.</div>
}



@code
{

    private TaskObject taskObject = new TaskObject
    {
            Priority = TaskPriority.Low,  // Default value for Priority
            Type = TaskType.Once,        // Default value for Type
            IsCompleted = false,           // Default value for IsCompleted
            DueDate = DateTime.Today
    };

    private bool isSuccess = false;
    private bool isError = false;
    int spacing;


    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine($"New Task - Title: {taskObject.Title}, Description: {taskObject.Description}, Priority: {taskObject.Priority}, DueDate: {taskObject.DueDate}, Type: {taskObject.Type}");

            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            var response = await httpClient.PostAsJsonAsync("api/task", taskObject);

            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                isError = false;
                taskObject = new TaskObject();
                StateHasChanged();

                // Hide success message after 5 seconds
                await Task.Delay(5000);
                isSuccess = false;
                StateHasChanged();
            }
            else
            {
                isSuccess = false;
                isError = true;
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            isError = true;
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
